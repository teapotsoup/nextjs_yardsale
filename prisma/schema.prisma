//schema.prisma 파일은 프리스마 설정을 하고, 데이터가 어떻게 생겼는지 정의하는 파일

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
   //외래키 참조 무결성 설정
}

model User{
  id Int @id @default(autoincrement())
  phone String? @unique
  email String? @unique
  name String
  avatar String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tokens Token[]
  products Product[]
  fav Fav[]
  posts Post[]
  answer Answer[]
  wonderings Wondering[]
}
model Token{
   id Int @id @default(autoincrement())
   payload String @unique
   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
   userId Int
  @@index([userId])
}

model Product{
   id Int @id @default(autoincrement())
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
   user User @relation(fields: [userId], references: [id], onDelete: Cascade) // Cascade 부모 레코드 삭제시 자식 레코드도 삭제 시킨다.
   userId Int
   image String
   name String
   price Int
   description String @db.MediumText
   favs Fav[]
  @@index([userId])
}

model Fav {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([userId])
  @@index([productId])
}

model Post{
  id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
     userId    Int
     question String @db.MediumText
     answers Answer[]
     wonderings Wondering[]
  @@index([userId])
}

model Answer{
  id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
     userId    Int
     post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
     postId Int
     answer String @db.MediumText
  @@index([userId])
  @@index([postId])
}

model Wondering{
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
     user User @relation(fields: [userId], references: [id], onDelete: Cascade)
     userId    Int
     post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
     postId Int
  @@index([userId])
  @@index([postId])
}